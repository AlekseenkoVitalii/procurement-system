function doGet(e) {
  try {
    LoggingService.logInfo('Main.doGet', '–í—Ö–æ–¥—è—â–∏–π GET –∑–∞–ø—Ä–æ—Å');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    const authController = new AuthController();
    const accessCheck = authController.checkAccess();
    
    if (!accessCheck.hasAccess) {
      return renderAccessDenied(accessCheck.message);
    }
    
    return renderDashboard(accessCheck.userInfo);
      
  } catch (error) {
    LoggingService.logError('Main.doGet', error);
    return HtmlService.createHtmlOutput(`
      <h1>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</h1>
      <p>${error.message}</p>
      <pre>${error.stack}</pre>
    `);
  }
}

function doPost(e) {
  try {
    const requestData = JSON.parse(e.postData.contents);
    const action = requestData.action;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    const authController = new AuthController();
    const accessCheck = authController.checkAccess();
    
    if (!accessCheck.hasAccess) {
      return ApiResponse.error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 401);
    }
    
    // API —Ä–æ—É—Ç–∏–Ω–≥
    switch (action) {
      case 'checkAccess':
        return ApiResponse.success(accessCheck.userInfo, '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
      
      case 'getUserInfo':
        return ApiResponse.success(accessCheck.userInfo);
      
      case 'getUserOrders': {
        const orderController = new OrderController();
        return orderController.getUserOrders(accessCheck.userInfo);
      }
      
      case 'getAllOrders': {
        const orderController = new OrderController();
        return orderController.getAllOrders(accessCheck.userInfo);
      }
      
      case 'getOrderDetails': {
        const orderController = new OrderController();
        return orderController.getOrderDetails(requestData.orderId, accessCheck.userInfo);
      }
      
      case 'createOrder': {
        const orderController = new OrderController();
        return orderController.createOrder(requestData.orderData, accessCheck.userInfo);
      }
      
      default:
        return ApiResponse.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' + action);
    }
    
  } catch (error) {
    LoggingService.logError('Main.doPost', error);
    return ApiResponse.error('–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞', 500);
  }
}

function renderDashboard(userInfo) {
  try {
    const template = HtmlService.createTemplateFromFile('index');
    template.userInfo = userInfo;
    
    return template.evaluate()
      .setTitle(Config.APP_SETTINGS.NAME)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    LoggingService.logError('Main.renderDashboard', error);
    return HtmlService.createHtmlOutput(`
      <h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h1>
      <p>${error.message}</p>
    `);
  }
}

function include(filename) {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    LoggingService.logDebug('Main.include', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞', { filename });
    
    if (filename === 'styles') {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
      try {
        return HtmlService.createHtmlOutputFromFile('styles.html').getContent();
      } catch (e) {
        try {
          return HtmlService.createHtmlOutputFromFile('styles').getContent();
        } catch (e2) {
          LoggingService.logError('Main.include', e2, { filename: 'styles' });
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
          return getDefaultStyles();
        }
      }
    }
    
    if (filename === 'app') {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å api.html –∏ app.html
        const apiContent = HtmlService.createHtmlOutputFromFile('api.html').getContent();
        const appContent = HtmlService.createHtmlOutputFromFile('app.html').getContent();
        return apiContent + '\n' + appContent;
      } catch (e) {
        try {
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ .html
          const apiContent = HtmlService.createHtmlOutputFromFile('api').getContent();
          const appContent = HtmlService.createHtmlOutputFromFile('app').getContent();
          return apiContent + '\n' + appContent;
        } catch (e2) {
          LoggingService.logError('Main.include', e2, { filename: 'app' });
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JS –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          return getDefaultApp();
        }
      }
    }
    
    return '';
  } catch (error) {
    LoggingService.logError('Main.include', error);
    return '';
  }
}

function getDefaultStyles() {
  return `
    body { font-family: Arial, sans-serif; margin: 20px; }
    .loading-screen { text-align: center; padding: 50px; }
    .alert { padding: 10px; margin: 10px 0; border-radius: 5px; }
    .alert-danger { background-color: #f8d7da; color: #721c24; }
  `;
}

function getDefaultApp() {
  return `
    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('loading-screen').innerHTML = 
        '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã api.html –∏ app.html</div>';
    });
  `;
}

function renderAccessDenied(message) {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</title>
      <meta charset="UTF-8">
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
        .error { color: #e74c3c; }
      </style>
    </head>
    <body>
      <h1 class="error">üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h1>
      <p>${message}</p>
    </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(html);
}

// ===== –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò =====

function test() {
  LoggingService.logInfo('test', '–¢–µ—Å—Ç MVC —Å–∏—Å—Ç–µ–º—ã');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  const auth = new AuthController();
  const user = auth.userModel.getCurrentUser();
  
  return `MVC —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user ? user.email : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`;
}

function testDatabase() {
  LoggingService.logInfo('testDatabase', '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  
  try {
    const userModel = new User();
    const currentUser = userModel.getCurrentUser();
    
    return {
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞',
      user: currentUser ? currentUser.email : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î'
    };
  } catch (error) {
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: ' + error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤
function checkHtmlFiles() {
  const results = {
    'index.html': false,
    'styles.html': false,
    'app.html': false,
    'api.html': false,
    'index': false,
    'styles': false,
    'app': false,
    'api': false
  };
  
  for (const filename of Object.keys(results)) {
    try {
      HtmlService.createHtmlOutputFromFile(filename);
      results[filename] = true;
    } catch (e) {
      results[filename] = false;
    }
  }
  
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–æ–≤:', results);
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function debugWebApp() {
  try {
    console.log('=== –û–¢–õ–ê–î–ö–ê –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    const authController = new AuthController();
    const accessCheck = authController.checkAccess();
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:', accessCheck);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª—ã
    const htmlFiles = checkHtmlFiles();
    console.log('HTML —Ñ–∞–π–ª—ã:', htmlFiles);
    
    // 3. –ü—Ä–æ–±—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å dashboard
    if (accessCheck.hasAccess) {
      try {
        const output = renderDashboard(accessCheck.userInfo);
        console.log('Dashboard —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ');
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ dashboard:', e);
      }
    }
    
    return {
      access: accessCheck,
      htmlFiles: htmlFiles
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    return { error: error.message };
  }
}